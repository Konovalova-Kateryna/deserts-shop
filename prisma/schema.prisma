generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

model User {
    id               String            @id @unique @default(dbgenerated())
    fullName         String
    email            String            @unique
    password         String
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    provider         String?
    providerId       String?
    role             UserRole          @default(USER)
    phone            String?
    address          String?
    verified         DateTime?
    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode?

    favorite Favorite?
}

model Category {
    id        String    @id @unique @default(dbgenerated())
    name      String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    color     String
    icon      String
    nameUa    String
    products  Product[]
}

model Product {
    id          String @id @unique @default(dbgenerated())
    name        String
    titleUa     String
    description String
    price       Int
    imageUrl    String
    categoryId  String

    favorite      Boolean    @default(false)
    favoriteCount Int?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    trend         Boolean    @default(false)
    CartItem      CartItem[]
    category      Category   @relation(fields: [categoryId], references: [id])

    FavoriteItem FavoriteItem[]
}

model Favorite {
    id     String @id @unique @default(dbgenerated())
    userId String @unique
    token  String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user  User           @relation(fields: [userId], references: [id])
    items FavoriteItem[]
}

model FavoriteItem {
    id         String @id @unique @default(dbgenerated())
    favoriteId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    productId String
    favorite  Favorite @relation(fields: [favoriteId], references: [id])
    product   Product  @relation(fields: [productId], references: [id])
}

model Cart {
    id          String     @id @unique @default(dbgenerated())
    userId      String?    @unique
    token       String     @unique
    totalAmount Int        @default(0)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    user        User?      @relation(fields: [userId], references: [id])
    items       CartItem[]
}

model CartItem {
    id        String   @id @unique @default(dbgenerated())
    cartId    String
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    productId String
    cart      Cart     @relation(fields: [cartId], references: [id])
    product   Product  @relation(fields: [productId], references: [id])
}

model Order {
    id          String      @id @unique @default(dbgenerated())
    userId      String?
    token       String      @unique
    totalAmount Int
    status      OrderStatus
    paymentId   String
    items       Json
    fullName    String
    email       String
    phone       String
    address     String
    comment     String
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    user        User?       @relation(fields: [userId], references: [id])
}

model VerificationCode {
    id String @id @unique @default(dbgenerated())

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique

    code String

    createAt DateTime @default(now())
}

enum OrderStatus {
    PENDING
    SUCCESSED
    CANCELED
}

enum UserRole {
    USER
    ADMIN
}
